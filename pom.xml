<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<prerequisites>
		<maven>3.0.0</maven>
	</prerequisites>

	<groupId>com.linkedin.camus</groupId>
	<artifactId>camus-parent</artifactId>
	<version>0.2.0-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>Camus Parent</name>
	<description>
	    Camus is LinkedIn's Kafka->HDFS pipeline. It is a mapreduce
job that does distributed data loads out of Kafka, refactored to better
suit the needs of Meridian.
	</description>
	<url>https://github.com/linkedin/camus</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<avroVersion>1.7.5</avroVersion>
		<hadoopVersion>2.2.0-cdh5.0.0-beta-1</hadoopVersion>
		<kafkaVersion>0.8.0</kafkaVersion>
		<log4jVersion>1.2.17</log4jVersion>
		<jodaTimeVersion>2.3</jodaTimeVersion>
		<zookeeperVersion>3.4.5-cdh5.0.0-beta-1</zookeeperVersion>
		<mockitoVersion>1.9.5</mockitoVersion>
		<scalaVersion>2.10.3</scalaVersion>
		<junitVersion>4.10</junitVersion>
		<testNgVersion>6.8.7</testNgVersion>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>com.linkedin.camus</groupId>
				<artifactId>camus-api</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.linkedin.camus</groupId>
				<artifactId>camus-etl-kafka</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.linkedin.camus</groupId>
				<artifactId>camus-schema-registry</artifactId>
				<version>${project.version}</version>
			</dependency>
			<dependency>
				<groupId>com.linkedin.camus</groupId>
				<artifactId>camus-schema-registry</artifactId>
				<version>${project.version}</version>
				<type>test-jar</type>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>log4j</groupId>
				<artifactId>log4j</artifactId>
				<version>${log4jVersion}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.avro</groupId>
				<artifactId>avro</artifactId>
				<version>${avroVersion}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.avro</groupId>
				<artifactId>avro-mapred</artifactId>
				<version>${avroVersion}</version>
			</dependency>
			<dependency>
				<groupId>joda-time</groupId>
				<artifactId>joda-time</artifactId>
				<version>${jodaTimeVersion}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.hadoop</groupId>
				<artifactId>hadoop-client</artifactId>
				<version>${hadoopVersion}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.kafka</groupId>
				<artifactId>kafka_2.10</artifactId>
				<version>${kafkaVersion}</version>
				<exclusions>
					<exclusion>
						<groupId>log4j</groupId>
						<artifactId>log4j</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.slf4j</groupId>
						<artifactId>slf4j-api</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.slf4j</groupId>
						<artifactId>slf4j-simple</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>org.apache.zookeeper</groupId>
				<artifactId>zookeeper</artifactId>
				<version>${zookeeperVersion}</version>
			</dependency>
			<dependency>
				<groupId>org.mockito</groupId>
				<artifactId>mockito-all</artifactId>
				<version>${mockitoVersion}</version>
			</dependency>
			<dependency>
				<groupId>org.scala-lang</groupId>
				<artifactId>scala-library</artifactId>
				<version>${scalaVersion}</version>
			</dependency>
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junitVersion}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.testng</groupId>
				<artifactId>testng</artifactId>
				<version>${testNgVersion}</version>
				<scope>test</scope>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<modules>
		<module>camus-api</module>
		<module>camus-etl-kafka</module>
		<module>camus-schema-registry</module>
	</modules>

	<licenses>
		<license>
			<name>Apache License 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
			<distribution>repo</distribution>
		</license>
	</licenses>

	<scm>
		<connection>scm:git:git://github.com/jhutton/camus.git</connection>
		<developerConnection>scm:git:git@github.com:jhutton/camus.git</developerConnection>
		<url>http://github.com/jhutton/camus/</url>
	</scm>

	<issueManagement>
		<system>github</system>
		<url>http://github.com/linkedin/camus/issues</url>
	</issueManagement>

	<repositories>
		<repository>
			<id>cloudera</id>
			<url>https://repository.cloudera.com/artifactory/cloudera-repos/</url>
		</repository>
		<repository>
			<id>apache-releases</id>
			<url>https://repository.apache.org/content/groups/public</url>
		</repository>
	</repositories>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.0</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.3.2</version>
				<executions>
					<execution>
						<goals>
							<goal>test-jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
